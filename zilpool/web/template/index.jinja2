{% extends "base.jinja2" %}

{% block body %}
<!-- Masthead -->
<header class="masthead text-white text-center">
  <div class="overlay"></div>
  <div class="container">
    <div class="row">
      <div class="col mx-auto">
        <h1 class="mt-5"></h1>
        <h1 class="mb-7">Mining Pool for </h1>
        <h1 class="mb-12"><span class="zil_text">Zilliqa</span> Nodes and Miners</h1>
        <h1>
          <a class="btn btn-lg btn-warning" href="#start_mining">Start Mining</a>
        </h1>
        <h1>
          <a class="btn btn-lg btn-dark" href="#register_node">Register ZIL Node</a>
        </h1>
      </div>
      <div class="col mx-auto">
        <div class="card">
          <div class="card-header">
            <h2 class="text-dark text-center">
              <img src="/static/img/zilliqa-logo_1.png"/>
              <span class="v-middle">Zilliqa</span>
            </h2>
          </div>
          <div class="card-body text-dark">
            <table class="table table-hover text-left">
              <tbody>
                <tr>
                  <th scope="row">Current DS Block</th>
                  <td>{{ current.block_num }}</td>
                </tr>
                <tr>
                  <th scope="row">Next PoW Time</th>
                  <td id="next_pow_time">{{ current.next_pow_time }}</td>
                </tr>
                <tr>
                  <th scope="row">PoW Workers</th>
                  <td>{{ summary.workers.active }} / {{ summary.workers.all }}</td>
                </tr>
                <tr>
                  <th scope="row">ZIL Nodes</th>
                  <td>{{ summary.nodes.active }} / {{ summary.nodes.all }}</td>
                </tr>
                <tr>
                  <th scope="row">Hashrate</th>
                  <td>{{ "%.1f"|format((current.avg_hashrate/1000000)|float) }} Mh/s</td>
                </tr>
                <tr>
                  <th scope="row">Average Reward</th>
                  <td>{{ current.avg_pow_fee }} ZILs/work</td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  </div>
</header>
<section class="showcase">
  <div class="container-fluid p-0">
    <!-- Start Mining -->
    <div id="start_mining" class="row no-gutters">
      <div class="col-12 col-xxl-8 mx-auto miner_bg p-5">
        <h3>I am a Miner</h3>
        <p class="lead mb-0"><b>Step 1</b>: Create a Zilliqa Wallet on
                  <a href="https://wallet.zilliqa.com">https://wallet.zilliqa.com</a>
        <p class="lead mb-0">
          <b>Step 2</b>: Register your <b>Wallet Address</b> and <b>Email</b>
        </p>
        <form id="form_miner" class="mt-3">
          <div class="form-group col-lg-6">
            <input id="miner_address" class="form-control" type="text" placeholder="your ZIL Wallet Address"
            onkeypress="return event.keyCode != 13;">
          </div>
          <div class="form-row col-lg-6">
            <div class="form-group col-lg-7">
              <input id="miner_email" type="email" class="form-control form-inline pr-2" placeholder="your email"
              onkeypress="return event.keyCode != 13;">
            </div>
            <div class="form-group col-lg-4">
              <!--input id="miner_nickname" type="text" class="form-control form-inline pr-2" placeholder="nick name"
              onkeypress="return event.keyCode != 13;" -->
            </div>
          </div>
          <a id="btn_register_miner" class="btn btn-warning mb-2" href="javascript:void(0);">Register Miner</a>
          <div id="miner_msg" class="col-lg-6 alert" style="display:none;"></div>
        </form>
        <p class="lead mb-0">
          <b>Step 3</b>: Download and extract
          <a class="btn btn-primary btn-sm ml-2" href="https://github.com/deepgully/ethminer/releases">
            Download ZILMiner
          </a>
        </p>
        <p class="lead mb-0">
          <b>Step 4</b>: Run ZILMiner with following settings
          <a class="text-info" href="https://github.com/deepgully/ethminer/wiki">user manual</a>
          <div><code>
            ./zilminer -P zil://[registered address].[worker name]@{{ config.pool.api_endpoints[0].replace("http://", "").replace("https://", "").strip() }}
          </code></div>
          Example:
          <div><code>
            ./zilminer -P zil://0x0123456789012345678901234567890123456789.zil_worker1@{{ config.pool.api_endpoints[0].replace("http://", "").replace("https://", "").strip() }}
          </code></div>
        </p>
        <h4>Done</h4>
      </div>
    </div>
    <!-- Register ZIL Node -->
    <div id="register_node" class="row no-gutters">
      <div class="col-12 col-xxl-8 mx-auto row p-5">
        <div class="col-lg-4 nodes_bg"></div>
        <div class="col-lg-8">
          <h3>I am a Node Owner</h3>
          <p class="lead mb-0">
            <b>Step 1</b>: Register your Node(s) with <b>Public Key</b> and <b>Email</b>
          </p>
          <form class="mt-3">
            <div class="form-group col-lg-12">
              <label>Public Keys(one line per node):</label>
              <textarea id="node_pub_keys" class="form-control fixed-font" rows="3"></textarea>
            </div>
            <div class="form-group col-lg-6">
              <input id="node_email" type="email" class="form-control" placeholder="your email"
               onkeypress="return event.keyCode != 13;">
            </div>
            <a id="btn_register_nodes" class="btn btn-dark mb-2" href="javascript:void(0);">Register Node(s)</a>
            <div id="node_msg" class="node-msg col-lg-12 alert alert-danger" style="display:none;"></div>
          </form>
          <p class="lead mb-0"><b>Step 2</b>: Waiting for Authorization email from pool
          </p>
          <p class="lead mb-0"><b>Step 3</b>: Run a ZIL Node in Remote Mining Mode, details in
            <a href="https://github.com/Zilliqa/Zilliqa/wiki/Mining">Mining Guide</a>,
          </p>
          <p class="lead mb-0 pl-4"><b>1. </b>
            Set REMOTE_MINE to <code>true</code> in constants.xml
          </p>
          <p class="lead mb-0 pl-4"><b>2. </b>
            Set MINING_PROXY_URL to <code>{{ config.pool.api_endpoints[0] }}</code> in constants.xml
          </p>
          <p class="lead mb-0 pl-4"><b>3. </b>
            Start your ZIL Node
          </p>
          <h4>Done</h4>
        </div>
      </div>
    </div>
  </div>
</section>
{% endblock %}

{% block script %}
<script src="https://unpkg.com/dayjs@1.7.8/dayjs.min.js"></script>
<script>
  function update_pow_time(str_pow_time) {
    const pow_time = dayjs(str_pow_time);
    const mins = pow_time.diff(dayjs(), "minute");
    var pow_msg = "PoW is running";
    if (mins > 0) {
        pow_msg = mins.toString() + " mins later";
    }
    $("#next_pow_time").text(pow_msg);
  }

  function register_miner() {
    error_msg("#miner_msg", "");

    let wallet_address = $.trim($("#miner_address").val()).toLowerCase();
    let email = $.trim($("#miner_email").val());
    let nickname = $.trim($("#miner_nickname").val());

    wallet_address = valid_hex_str(wallet_address, 42);
    if (!wallet_address) {
      error_msg("#miner_msg", "Invalid Wallet Address", "danger");
      return;
    }
    if (!valid_email(email)) {
      error_msg("#miner_msg", "Invalid Email", "danger");
      return;
    }

    jsonrpc(
      "/api",
      "register_miner",
      [wallet_address, email, nickname],
      function (result) {
        if (!result) {
          error_msg("#miner_msg", "address existed", "danger");
        } else {
          error_msg("#miner_msg", "register success " + result.wallet_address, "success");
        }
      },
      function (error) {
        error_msg("#miner_msg", error, "danger");
      }
    );
  }

  function valid_node_keys(node_keys) {
    node_keys = node_keys.split(/[,\n|]/);
    let valid_keys = [];

    for (let i=0; i < node_keys.length; i++) {
      let pub_key = $.trim(node_keys[i]);
      if (pub_key.length === 0) {
        continue;
      }
      let _pub_key = valid_hex_str(pub_key, 68);
      if (!_pub_key) {
        error_msg("#node_msg", "Invalid Node Public Key " + pub_key, "danger");
        return false;
      }
      if (!valid_keys.includes(_pub_key)) {
        valid_keys.push(_pub_key);
      }
    }
    return valid_keys;
  }

  function register_nodes() {
    error_msg("#node_msg", "");
    $(".node-msg").hide();

    let node_keys = $.trim($("#node_pub_keys").val()).toLowerCase();
    let email = $.trim($("#node_email").val());

    if (!valid_email(email)) {
      error_msg("#node_msg", "Invalid Email", "danger");
      return;
    }
    node_keys = valid_node_keys(node_keys);
    if (!node_keys) {
      return;
    } else if (node_keys.length === 0) {
      error_msg("#node_msg", "Node Public Key is required", "danger");
      return;
    }

    error_msg("#node_msg", "register " + node_keys.length + " nodes ", "warning");

    let pub_keys = node_keys.join(",")

    jsonrpc(
      "/api",
      "register_node",
      [pub_keys, email],
      function (result) {
        if (!result) {
          append_msg("#node_msg", "register failed", "danger");
        } else {
          append_msg("#node_msg", "register success", "success");
        }
      },
      function (error) {
        append_msg("#node_msg", error, "danger");
      }
    );
  }

  $(document).ready(function() {
    update_pow_time('{{ current.next_pow_time }}');

    $("#btn_register_miner").click(register_miner);

    $("#btn_register_nodes").click(register_nodes);
  });
</script>
{% endblock %}
